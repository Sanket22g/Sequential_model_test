{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":18513,"sourceType":"datasetVersion","datasetId":13720}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:31.974480Z","iopub.execute_input":"2025-02-02T14:42:31.974946Z","iopub.status.idle":"2025-02-02T14:42:32.353268Z","shell.execute_reply.started":"2025-02-02T14:42:31.974886Z","shell.execute_reply":"2025-02-02T14:42:32.352419Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/insurance/insurance.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import pandas as pd \ndf=pd.read_csv(\"/kaggle/input/insurance/insurance.csv\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.354463Z","iopub.execute_input":"2025-02-02T14:42:32.354945Z","iopub.status.idle":"2025-02-02T14:42:32.392484Z","shell.execute_reply.started":"2025-02-02T14:42:32.354884Z","shell.execute_reply":"2025-02-02T14:42:32.391557Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   age     sex     bmi  children smoker     region      charges\n0   19  female  27.900         0    yes  southwest  16884.92400\n1   18    male  33.770         1     no  southeast   1725.55230\n2   28    male  33.000         3     no  southeast   4449.46200\n3   33    male  22.705         0     no  northwest  21984.47061\n4   32    male  28.880         0     no  northwest   3866.85520","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>female</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>southwest</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>male</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>male</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>male</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>male</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>3866.85520</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.394025Z","iopub.execute_input":"2025-02-02T14:42:32.394287Z","iopub.status.idle":"2025-02-02T14:42:32.416028Z","shell.execute_reply.started":"2025-02-02T14:42:32.394265Z","shell.execute_reply":"2025-02-02T14:42:32.415019Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"               age          bmi     children       charges\ncount  1338.000000  1338.000000  1338.000000   1338.000000\nmean     39.207025    30.663397     1.094918  13270.422265\nstd      14.049960     6.098187     1.205493  12110.011237\nmin      18.000000    15.960000     0.000000   1121.873900\n25%      27.000000    26.296250     0.000000   4740.287150\n50%      39.000000    30.400000     1.000000   9382.033000\n75%      51.000000    34.693750     2.000000  16639.912515\nmax      64.000000    53.130000     5.000000  63770.428010","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1338.000000</td>\n      <td>1338.000000</td>\n      <td>1338.000000</td>\n      <td>1338.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>39.207025</td>\n      <td>30.663397</td>\n      <td>1.094918</td>\n      <td>13270.422265</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>14.049960</td>\n      <td>6.098187</td>\n      <td>1.205493</td>\n      <td>12110.011237</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>18.000000</td>\n      <td>15.960000</td>\n      <td>0.000000</td>\n      <td>1121.873900</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>27.000000</td>\n      <td>26.296250</td>\n      <td>0.000000</td>\n      <td>4740.287150</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>39.000000</td>\n      <td>30.400000</td>\n      <td>1.000000</td>\n      <td>9382.033000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>51.000000</td>\n      <td>34.693750</td>\n      <td>2.000000</td>\n      <td>16639.912515</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>64.000000</td>\n      <td>53.130000</td>\n      <td>5.000000</td>\n      <td>63770.428010</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.417304Z","iopub.execute_input":"2025-02-02T14:42:32.417600Z","iopub.status.idle":"2025-02-02T14:42:32.440154Z","shell.execute_reply.started":"2025-02-02T14:42:32.417576Z","shell.execute_reply":"2025-02-02T14:42:32.439216Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1338 entries, 0 to 1337\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   age       1338 non-null   int64  \n 1   sex       1338 non-null   object \n 2   bmi       1338 non-null   float64\n 3   children  1338 non-null   int64  \n 4   smoker    1338 non-null   object \n 5   region    1338 non-null   object \n 6   charges   1338 non-null   float64\ndtypes: float64(2), int64(2), object(3)\nmemory usage: 73.3+ KB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"#lets find is there any null value \ndf.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.441092Z","iopub.execute_input":"2025-02-02T14:42:32.441445Z","iopub.status.idle":"2025-02-02T14:42:32.459015Z","shell.execute_reply.started":"2025-02-02T14:42:32.441409Z","shell.execute_reply":"2025-02-02T14:42:32.458073Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"age         0\nsex         0\nbmi         0\nchildren    0\nsmoker      0\nregion      0\ncharges     0\ndtype: int64"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"#okay all right so we do such operation in sort to do preprocessing \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.460091Z","iopub.execute_input":"2025-02-02T14:42:32.460379Z","iopub.status.idle":"2025-02-02T14:42:32.473000Z","shell.execute_reply.started":"2025-02-02T14:42:32.460347Z","shell.execute_reply":"2025-02-02T14:42:32.472036Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"new_df=pd.get_dummies(df).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.473850Z","iopub.execute_input":"2025-02-02T14:42:32.474155Z","iopub.status.idle":"2025-02-02T14:42:32.495479Z","shell.execute_reply.started":"2025-02-02T14:42:32.474132Z","shell.execute_reply":"2025-02-02T14:42:32.494708Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"import seaborn as sn \nimport matplotlib.pyplot as plt\nsn.pairplot(df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:32.496335Z","iopub.execute_input":"2025-02-02T14:42:32.496579Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7875ce06f370>"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"new_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:37.821704Z","iopub.execute_input":"2025-02-02T14:42:37.822166Z","iopub.status.idle":"2025-02-02T14:42:37.835644Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"      age  bmi  children  charges  sex_female  sex_male  smoker_no  \\\n0      19   27         0    16884           1         0          0   \n1      18   33         1     1725           0         1          1   \n2      28   33         3     4449           0         1          1   \n3      33   22         0    21984           0         1          1   \n4      32   28         0     3866           0         1          1   \n...   ...  ...       ...      ...         ...       ...        ...   \n1333   50   30         3    10600           0         1          1   \n1334   18   31         0     2205           1         0          1   \n1335   18   36         0     1629           1         0          1   \n1336   21   25         0     2007           1         0          1   \n1337   61   29         0    29141           1         0          0   \n\n      smoker_yes  region_northeast  region_northwest  region_southeast  \\\n0              1                 0                 0                 0   \n1              0                 0                 0                 1   \n2              0                 0                 0                 1   \n3              0                 0                 1                 0   \n4              0                 0                 1                 0   \n...          ...               ...               ...               ...   \n1333           0                 0                 1                 0   \n1334           0                 1                 0                 0   \n1335           0                 0                 0                 1   \n1336           0                 0                 0                 0   \n1337           1                 0                 1                 0   \n\n      region_southwest  \n0                    1  \n1                    0  \n2                    0  \n3                    0  \n4                    0  \n...                ...  \n1333                 0  \n1334                 0  \n1335                 0  \n1336                 1  \n1337                 0  \n\n[1338 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>charges</th>\n      <th>sex_female</th>\n      <th>sex_male</th>\n      <th>smoker_no</th>\n      <th>smoker_yes</th>\n      <th>region_northeast</th>\n      <th>region_northwest</th>\n      <th>region_southeast</th>\n      <th>region_southwest</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>27</td>\n      <td>0</td>\n      <td>16884</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>33</td>\n      <td>1</td>\n      <td>1725</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>33</td>\n      <td>3</td>\n      <td>4449</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>22</td>\n      <td>0</td>\n      <td>21984</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>28</td>\n      <td>0</td>\n      <td>3866</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1333</th>\n      <td>50</td>\n      <td>30</td>\n      <td>3</td>\n      <td>10600</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1334</th>\n      <td>18</td>\n      <td>31</td>\n      <td>0</td>\n      <td>2205</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1335</th>\n      <td>18</td>\n      <td>36</td>\n      <td>0</td>\n      <td>1629</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1336</th>\n      <td>21</td>\n      <td>25</td>\n      <td>0</td>\n      <td>2007</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1337</th>\n      <td>61</td>\n      <td>29</td>\n      <td>0</td>\n      <td>29141</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1338 rows × 12 columns</p>\n</div>"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"max(df[\"charges\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:37.837000Z","iopub.execute_input":"2025-02-02T14:42:37.837315Z","iopub.status.idle":"2025-02-02T14:42:37.854336Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"63770.42801"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"# lets create depending or independing variable \nX=new_df.drop(columns=[\"charges\"])\ny=new_df[\"charges\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:37.855202Z","iopub.execute_input":"2025-02-02T14:42:37.855520Z","iopub.status.idle":"2025-02-02T14:42:37.872150Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#view Y\ny.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:37.873157Z","iopub.execute_input":"2025-02-02T14:42:37.873569Z","iopub.status.idle":"2025-02-02T14:42:37.889766Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"0    16884\n1     1725\n2     4449\n3    21984\n4     3866\nName: charges, dtype: int64"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"#create trainig  and test \nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:37.890744Z","iopub.execute_input":"2025-02-02T14:42:37.891055Z","iopub.status.idle":"2025-02-02T14:42:38.076637Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nsclar=StandardScaler()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:38.077541Z","iopub.execute_input":"2025-02-02T14:42:38.077812Z","iopub.status.idle":"2025-02-02T14:42:38.081840Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train=sclar.fit_transform(X_train)\n\nX_test=sclar.fit_transform(X_test)\n\nlen(y_train)+len(y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:38.082862Z","iopub.execute_input":"2025-02-02T14:42:38.083179Z","iopub.status.idle":"2025-02-02T14:42:38.117046Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"1338"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"X.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:38.117943Z","iopub.execute_input":"2025-02-02T14:42:38.118215Z","iopub.status.idle":"2025-02-02T14:42:38.123525Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(1338, 11)"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"\nimport tensorflow as tf\ntf.random.set_seed(42)\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential \nfrom tensorflow.keras.optimizers import Adam, AdamW,RMSprop,Nadam\nmodel=Sequential([Dense(34,activation='relu',input_shape=(X_train.shape[1],)),\n                 Dense(20,activation=\"relu\"),\n                 Dense(10,activation=\"relu\"),\n                 Dense(1)])\nmodel.compile(loss=\"mae\",\n             optimizer= AdamW(learning_rate=0.005),\n             metrics=[\"mae\"])\nhistory=model.fit(X_train,y_train,epochs=500,verbose=0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:42:38.124486Z","iopub.execute_input":"2025-02-02T14:42:38.124827Z","iopub.status.idle":"2025-02-02T14:43:23.205423Z","shell.execute_reply.started":"2025-02-02T14:42:38.124796Z","shell.execute_reply":"2025-02-02T14:43:23.204452Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:43:23.206561Z","iopub.execute_input":"2025-02-02T14:43:23.207163Z","iopub.status.idle":"2025-02-02T14:43:23.228671Z","shell.execute_reply.started":"2025-02-02T14:43:23.207134Z","shell.execute_reply":"2025-02-02T14:43:23.227761Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m34\u001b[0m)                  │             \u001b[38;5;34m408\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m)                  │             \u001b[38;5;34m700\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)                  │             \u001b[38;5;34m210\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m11\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">34</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">408</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">700</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">210</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,989\u001b[0m (15.59 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,989</span> (15.59 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,329\u001b[0m (5.19 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,329</span> (5.19 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2,660\u001b[0m (10.39 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,660</span> (10.39 KB)\n</pre>\n"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"#evaluate our thrid model \nmodel.evaluate(X_test,y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:43:23.229666Z","iopub.execute_input":"2025-02-02T14:43:23.230043Z","iopub.status.idle":"2025-02-02T14:43:23.450190Z","shell.execute_reply.started":"2025-02-02T14:43:23.230006Z","shell.execute_reply":"2025-02-02T14:43:23.449337Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1644.6230 - mae: 1644.6230  \n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"[1739.5047607421875, 1739.5047607421875]"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"pd.DataFrame(history.history).plot()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T14:43:23.451010Z","iopub.execute_input":"2025-02-02T14:43:23.451341Z","iopub.status.idle":"2025-02-02T14:43:23.711378Z","shell.execute_reply.started":"2025-02-02T14:43:23.451315Z","shell.execute_reply":"2025-02-02T14:43:23.710335Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":20}]}